ABAPZombie Guide to ABAP ‚Äì Parte 7 ‚Äì ASSIGN
Autor: Mauricio Cruz
Data: 10/02/2011 08:59

ASSIGN!
D√° pra falar bastante coisa desse comando que √© uma m√£o na roda para qualquer programador.
* Aten√ß√£o, este √© um post longo porque cont√©m explica√ß√µes de diversas t√©cnicas com o ASSIGN. Eu achei que fosse ficar menor.., mas enfim üòõ
N√£o tem como falar de ASSIGN sem falar de FIELD-SYMBOLS, por isso eu irei adiantar o t√≥pico dos
FIELD-SYMBOLS
(clique para ler, caso n√£o saiba do que se trata!).
O que ele faz:
voc√™ cria uma refer√™ncia para uma √°rea de mem√≥ria, e associa essa ref√™ncia a um Field-Symbol atrav√©s do ASSIGN.
Isso que dizer que, ap√≥s dar um ASSIGN, voc√™ pode mudar o valor da vari√°vel X diretamente pelo Field-Symbol, como no exemplo abaixo:
REPORT zombie_assign.

* Declara√ß√£o dos Field-Symbols
*-----------------------------------
FIELD-SYMBOLS: <fs_teste> TYPE ANY.

* Vari√°vel Qualquer
*-----------------------------------
DATA: v_matnr TYPE mara-matnr.

* Cria a refer√™ncia da √°rea de mem√≥ria no Field-Symbol. Note que
* √© necess√°rio colocar o nome da vari√°vel entre ( ), al√©m de o nome
* estar em letras ma√≠usculas.
ASSIGN ('V_MATNR') TO <fs_teste>.

IF  IS ASSIGNED.
 <fs_teste>  = 'MATERIALZUMBI'.
ENDIF.

WRITE v_matnr.
A vantagem principal √© que voc√™ pode usar um mesmo field-symbol para alterar vari√°veis diferentes com a
mesma linha de c√≥digo
. Como no exemplo abaixo:
Sempre que voc√™ for atribuir valores a um Field-Symbol verifique antes se o mesmo foi realmente referenciado, atrav√©s da consist√™ncia
IS ASSIGNED
. Se voc√™ tentar usar um Field Symbols que n√£o foi corretamente referenciado, o programa ir√° gerar um DUMP! Voc√™ tamb√©m pode desfazer a refer√™ncia atrav√©s do comando
UNASSIGN <fs>
.
Mas qual a vantagem disso tudo? Elementar meu caro leitor:
usar o mesmo field-symbol para alterar valores de campos diferentes!
üòÄ
REPORT zombie_assign.

* Declara√ß√£o dos Field-Symbols
*-----------------------------------
FIELD-SYMBOLS: <fs_teste> TYPE ANY.

* Note que cada vari√°vel √© de um tipo diferente!
*-----------------------------------
DATA: v_matnr TYPE mara-matnr,
      v_mtart TYPE mara-mtart,
      v_labst TYPE mard-labst.

* Cria a refer√™ncia da √°rea de mem√≥ria no Field-Symbol. Note que
* √© necess√°rio colocar o nome da vari√°vel entre ( ), al√©m de o nome
* estar em letras ma√≠usculas.
ASSIGN ('V_MATNR') TO <fs_teste>.

IF <fs_teste> IS ASSIGNED.
  <fs_teste> = 'MATERIALZUMBI'.
ENDIF.

WRITE <fs_teste>.

ASSIGN ('V_MTART') TO <fs_teste>.

IF <fs_teste> IS ASSIGNED.
  <fs_teste> = 'FERT'.
ENDIF.

WRITE <fs_teste>.

ASSIGN ('V_LABST') TO <fs_teste>.

IF <fs_teste> IS ASSIGNED.
  <fs_teste> = '1234'.
ENDIF.

WRITE <fs_teste>.
O ASSIGN ainda tem mais coisas que podem ajud√°-lo em diversos momentos. Vamos l√°:
‚Äì
ASSIGN COMPONENT OF STRUCTURE
: Ele permite que voc√™ associe num Field-Symbol um campo qualquer de uma estrutura. E voc√™ nem precisa saber o nome exato do campo, s√≥ a posi√ß√£o dele na sequ√™ncia de declara√ß√£o da estrutura. vejamos:
REPORT zombie_assign.

* Declara√ß√£o dos Field-Symbols
*-----------------------------------
FIELD-SYMBOLS: <fs_wa> TYPE ANY.

* Work Area
*-----------------------------------
DATA: wa_mara TYPE mara.

* Assign de estrutura com o nome do campo da estrutura
ASSIGN COMPONENT 'MATNR' OF STRUCTURE wa_mara
                                   TO <fs_wa>.

IF <fs_wa> IS ASSIGNED.
  <fs_wa> = 'MATERIALZUMBI'.
ENDIF.

WRITE wa_mara-matnr.

* O campo 10 √© o campo MTART
ASSIGN COMPONENT 10 OF STRUCTURE wa_mara
                              TO <fs_wa>.

IF <fs_wa> IS ASSIGNED.
  <fs_wa> = 'FERT'.
ENDIF.

WRITE <fs_wa>.
‚Äì
ASSIGN CASTING
: Ele faz a mesma refer√™ncia dos outros, mas o field-symbol mostra o valor do tipo que voc√™ usou no casting. Ou seja, voc√™ pode associar uma vari√°vel char √† um field-symbol que ir√° mostrar o seu valor em hexadecimal.
Isso √© √∫til para achar e manipular caracteres especiais em strings, como quebras de linha e tabs indesejados (aqueles que aparecem como # no debug).
REPORT zombie_assign.

* Declara√ß√£o dos Field-Symbols
*-----------------------------------
FIELD-SYMBOLS: <fs_x> TYPE ANY.

* Vari√°vel CHAR
*-----------------------------------
DATA: v_char TYPE char1.

* Referenciando o valor de V_CHAR trocando o tipo
ASSIGN ('V_CHAR') TO <fs_x> CASTING TYPE x.

* Se movermos AB para V_CHAR..
v_char = 'A'.

*... o WRITE do Field-Symbol escrever√° 41, que √© o c√≥digo em hexa do
* A  maiusculo :)
WRITE <fs_x>.
‚Äì
ASSIGN de vari√°veis de outros programas
: Voc√™ pode associar a mem√≥ria n√£o s√≥ do seu programa, mas de qualquer outro programa carregado na mem√≥ria da execu√ß√£o. Isso √© muito usado em EXITs, BADIs e Enhancement Points, para a leitura de dados que nem sempre est√£o dispon√≠veis na interface do FORM, Fun√ß√£o ou m√©todo:
* Um exemplo simples de cada capturar valores de outros programas carregados na mem√≥ria.
* Neste caso, estou capturando o valor de uma tabela que est√° declarada no
* programa SAPMV45A e associando a refer√™ncia no field-symbol.
ASSIGN ('(SAPMV45A)XVBAP') TO <fs_tabela>.

* Note que voc√™ pode usar as dicas do t√≥pico do Novo Debugger
* para navegar entre a pilha de programas carregados e verificar
*as vari√°veis que est√£o na mem√≥ria.
‚Äì LOOP AsSIGNING / READ ASSIGNING: Voc√™ pode ainda associar uma estrutura durante um loop ou um read, economizando uma work area e alterando os valores direto na tabela. Eu uso muito isso para alterar valores na tabela em que estou dando um Loop:
REPORT zombie_assign.

* Nesta declara√ß√£o √© necess√°rio definir o tipo exato da Work Area para
* o Field-Symbol, caso contr√°rio o comando <fs_mara>-matnr n√£o ir√°
* ativar...
FIELD-SYMBOLS: <fs_mara> TYPE mara.

* Tabela
DATA: t_mara TYPE TABLE OF mara.

* Linha vazia, s√≥ para mostrar o Loop
APPEND INITIAL LINE TO t_mara.

LOOP AT t_mara ASSIGNING <fs_mara>.
* Associando o valor direto na linha
  <fs_mara>-matnr = 'MATERIALZUMBI'.
ENDLOOP.

* Analise a tabela. Sem MODIFY nem nada, os valores da linha foram
* alterados :) Voc√™ pode usar isto com o o READ TABLE tamb√©m!
BREAK-POINT.
Phew, teminei. Aho que estes s√£o os mais utilizados.. üôÇ Qualquer d√∫vida √© s√≥ comentar!
Abra√ßo!



Coment√°rios:
Julio Cesar Marques Pires (17/05/2021 21:58): Valeu Muricio mto obrigado pelas dicas ! foi de grandre vali !
Hilda Araujo (21/08/2017 15:25): Boa tarde. Isso s√≥ funciona para programa?? E se a tabela/variavel estiver num classe/m√©todo, como fa√ßo?
Vinicius Ostan (02/08/2013 16:35): Grande Maur√≠cio, Cara, que t√≥pico excelente. Seu site √© minha wiki ABAP, mas sobre ASSIGN, tem um ponto que n√£o encontrei aqui, talvez fosse legal incluir-lo, segue abaixo: ASSIGN ->* TO . Eu costumo usar muito para trabalhar com tabela din√¢mica, mas confesso que n√£o sei bem como funciona  esse ‚Äù ->* ‚Äù . Abra√ßo
Rafael (10/07/2013 15:57): Ol√°, Parab√©ns pelo post, muito bem explicado. No exemplo com a tabela interna, o field symbol foi usado para modificar os dados da mesma. Como trata-se de um ponteiro para area de mem√≥ria da linha da tabela acessada, n√£o necessita fazer o ‚Äúmodify‚Äù. Queria saber se o field symbol tamb√©m √© recomendado para popular uma tabela interna, e caso seja, como poderia ser feito isso?
  Mauricio Cruz (10/07/2013 16:06): Cuidado‚Ä¶ se voc√™ sair falando por a√≠ que um field-symbol √© um ponteiro, algu√©m algum dia ir√° reclamar üôÇ Leia esta discuss√£o: http://scn.sap.com/thread/3227484 . E o √∫ltimo exemplo do post √© um exemplo de preenchimento de tabela interna com field-symbol. Mas cara, usa uma WA para adicionar dados em uma tabela que fica bem mais claro no c√≥digo o que voc√™ est√° fazendo. Abs!
    Rafael (10/07/2013 16:19): Ok, obrigado pelas dicas e pela rapida resposta!
    Rafael (10/07/2013 16:19): Ok, obrigado pelas dicas e pela rapida resposta!
  Mauricio Cruz (10/07/2013 16:06): Cuidado‚Ä¶ se voc√™ sair falando por a√≠ que um field-symbol √© um ponteiro, algu√©m algum dia ir√° reclamar üôÇ Leia esta discuss√£o: http://scn.sap.com/thread/3227484 . E o √∫ltimo exemplo do post √© um exemplo de preenchimento de tabela interna com field-symbol. Mas cara, usa uma WA para adicionar dados em uma tabela que fica bem mais claro no c√≥digo o que voc√™ est√° fazendo. Abs!
    Rafael (10/07/2013 16:19): Ok, obrigado pelas dicas e pela rapida resposta!
    Rafael (10/07/2013 16:19): Ok, obrigado pelas dicas e pela rapida resposta!
Jahniffer Santos (06/06/2013 14:28): Ol√°, Maur√≠cio. Tenho gostado muito de usar field-symbol e adotado-o sempre que poss√≠vel em meus c√≥digos, principalmente o do √∫ltimo caso de suas dicas. Adorei o resum√£o de como utiliz√°-lo ficou f√°cil de entender. Usarei mais vezes. Sobre seu coment√°rio, concordo plenamente sobre ser dever do programador utilizar os diversos artif√≠cios da linguagem da melhor maneira poss√≠vel. E sempre manter-se atualizado para conhecer os artif√≠cios oferecidos. Acredito que a escolha de uso entre um artif√≠cio e outro deve ser determinada por aquele que oferece mais benef√≠cios. Muito obrigada por compartilhar os conhecimentos.
Tim (09/03/2012 10:02): Muito bom esse t√≥pico e muito bem explicado!! Est√£o de parab√©ns pelo √≥timo conte√∫do do site. Abs.
  Mauricio Cruz (09/03/2012 10:06): Muito Obrigado!
  Mauricio Cruz (09/03/2012 10:06): Muito Obrigado!
Alex Ferreira (30/01/2012 09:24): Obrigado Mauricio!! O post ficou muito bom, bem explicado e muito did√°tico. Sanou v√°rias d√∫vidas que eu tinha a respeito de como utilizar o FIELD-SYMBOL e ASSIGN. √â muito bom ter pessoas como voc√™, dispostas a compartilhar o conhecimento. Valeu.
Pedro Paulo Costa (03/01/2012 08:40): Estava me perguntando se realmente era mais r√°pido loop/assign x loop/work area/modify usando sy-tabix‚Ä¶ Ampliei o c√≥digo acima, e a t_mara ficou com 10000 registros. Alterando o campo matnr de cada registro usando field-symbols, obtive 28.259 microseconds. Agora, Fazendo a mesma altera√ß√£o usando work area e o comando modify/sy-tabix, obtive 41.829 microseconds. Realizando outros testes com diferentes quantidades de registros na t_mara, percebe-se que h√° uma melhora na performance somente para tabelas acima de 5000 registros. Ex: 1000 registros: field-symbols: 2.167 microseconds work-area/modify = 2.966 microseconds. Gostei dessa id√©ia de usar field-symbols no loop, mas acredito que quanto mais field-symbols tem no c√≥digo mais fica dif√≠cil de entend√™-lo‚Ä¶.Creio que seja bom estudar se √© realmente necess√°rio no programa e us√°-lo com consci√™ncia para aproveitar as vantagens desse comando e n√£o deixar o c√≥digo dificil para que at√© nas pr√≥ximas manuten√ß√µes do c√≥digo o consultor que ler, conseguir entender da melhor maneira poss√≠vel. Concorda, Mauricio?
  Mauricio Cruz (03/01/2012 09:46): Ol√° Pedro! Obrigado pela coment√°rio! Concordo plenamente que devemos avaliar a viabilidade n√£o s√≥ do LOOP ASSIGNING, mas de qualquer t√©cnica de programa√ß√£o antes de sair utilizando. Interessante sua an√°lise.. mas eu achei os valores meio estranhos.. eu explico: na compara√ß√£o que fiz no programa deste post , o LOOP ASSIGNING sempre foi mais r√°pido, e mesmo assim a diferen√ßa √© m√≠nima, ou seja, tanto faz usar um ou outro pois n√£o vai causar impacto significativo na performance do c√≥digo. Se quiser fazer mais alguns testes e encontrar algo diferente, deixe o c√≥digo aqui nos coment√°rios para eu poder rodar e verificar tamb√©m! üôÇ Discordo que o Field-Symbol deixe o c√≥digo dif√≠cil: o que deixa o c√≥digo dif√≠cil √© o jeito com que as pessoas o utilizam. Se a linguagem tem diversos artif√≠cios, √© dever do programador utiliz√°-los da melhor maneira poss√≠vel, sempre tentando (e conseguindo na maior parte das vezes üòõ ) deixar o c√≥digo perform√°tico, estruturado e objetivo. Um abra√ßo! Mauricio
  Mauricio Cruz (03/01/2012 09:46): Ol√° Pedro! Obrigado pela coment√°rio! Concordo plenamente que devemos avaliar a viabilidade n√£o s√≥ do LOOP ASSIGNING, mas de qualquer t√©cnica de programa√ß√£o antes de sair utilizando. Interessante sua an√°lise.. mas eu achei os valores meio estranhos.. eu explico: na compara√ß√£o que fiz no programa deste post , o LOOP ASSIGNING sempre foi mais r√°pido, e mesmo assim a diferen√ßa √© m√≠nima, ou seja, tanto faz usar um ou outro pois n√£o vai causar impacto significativo na performance do c√≥digo. Se quiser fazer mais alguns testes e encontrar algo diferente, deixe o c√≥digo aqui nos coment√°rios para eu poder rodar e verificar tamb√©m! üôÇ Discordo que o Field-Symbol deixe o c√≥digo dif√≠cil: o que deixa o c√≥digo dif√≠cil √© o jeito com que as pessoas o utilizam. Se a linguagem tem diversos artif√≠cios, √© dever do programador utiliz√°-los da melhor maneira poss√≠vel, sempre tentando (e conseguindo na maior parte das vezes üòõ ) deixar o c√≥digo perform√°tico, estruturado e objetivo. Um abra√ßo! Mauricio
Allan Araujo (20/10/2011 13:35): No post acima tentei colocar o sinal de 'Maior que' e 'Menor que' rs.
Allan Araujo (20/10/2011 13:34): Obrigado pela dica! E s√≥ atentando pra quem ficar perdido √† 1¬™ vista com o uso de &LT e &GT, eles podem ser substituidos por , certo? Abs
  Mauricio Cruz (20/10/2011 13:37): Ol√° Allan! Sim, pode usar como maior e menor.. isso √© bug aqui do nosso site. Mas vamos acabar com essa coisa logo logo üôÇ Arrumei o post, bele? Abra√ßos!
  Mauricio Cruz (20/10/2011 13:37): Ol√° Allan! Sim, pode usar como maior e menor.. isso √© bug aqui do nosso site. Mas vamos acabar com essa coisa logo logo üôÇ Arrumei o post, bele? Abra√ßos!
Bruno Cappellini (26/04/2011 19:49): Muito obrigado pelas dicas e pelo conte√∫do irado do site! To estudando muito por aqui! Abra√ßo!