Macros e os comandos que n√£o existem (ou existem?).
Autor: Mauricio Cruz
Data: 15/02/2011 15:00

Antes de tudo, um fato que
ainda
assusta alguns ABAPers: voc√™ sabia que o comando ‚Äúbreak ‚Äú,
n√£o √© um COMANDO de verdade
?
Mas Hein?!?
Eu explico: o comandinho m√°gico ‚Äúbreak ‚Äù √©, na verdade, uma
MACRO!
D√∫vida? Ent√£o abre a√≠ a tabela
TRMAC
na SE16, e coloque o nome ‚ÄúBREAK‚Äù no campo name:
Comandos da MACRO break
Muito bonito, muito interessante‚Ä¶
mas que diabos s√£o macros?
Bom, vale dizer aqui que eu conheci as macros de uma maneira meio triste‚Ä¶ Quando eu estava come√ßando no mundo do ABAP, eu fiquei um temp√£o olhando para aquele ‚Äúvalidate_execution‚Äù dentro de uma EXIT da VA, tentando entender o que aquela coisa fazia.. at√© procurei no google :oops:. Da√≠ um amigo mais experiente me falou ‚Äúisso √© uma MACRO
cabe√ß√£o
!‚Äù, e me explicou o seguinte:
MACROs
s√£o sequ√™ncias de comandos pr√©-definidos dentro dos comandos
DEFINE‚Ä¶END-OF-DEFINITION
.
A id√©ia √© ter criar uma esp√©cie de ‚Äúnovo comando‚Äù, que voc√™ pode re-utilizar no resto do seu c√≥digo.
Os comandos ABAP definidos dentro de MACROs n√£o podem ser debuggados, portanto, devem conter poucas linhas.
As macros podem ser definidas globalmente, utilizando a tabela TRMAC (via sm30).
Eu n√£o recomendo utilizar isso, e nem recomendo que qualquer altera√ß√£o seja feita nas macros j√° existentes nesta tabela. Se voc√™ apagar algo e programas standard come√ßarem a dar erro de s√≠ntaxe, a culpa √© s√≥ sua :P!
.
Pois bem, vejamos o exemplo abaixo da cria√ß√£o de uma macro local:
REPORT  zombie_macro.

* Vari√°vel contadora de comida de zumbi.
DATA: v_cerebros_consumidos TYPE i.

* Cria√ß√£o da MACRO
*--------------------------------------------------------------------*
DEFINE comer_cerebros.

* Par√¢metros em MACROs s√£o marcados com &1...&9 Tome cuidado pois
* ele vai validar a sintaxe abaixo usando o valor do par√¢metro.
  v_cerebros_consumidos = v_cerebros_consumidos + &1.

END-OF-DEFINITION.

*--------------------------------------------------------------------*
* START-OF-SELECTION
*--------------------------------------------------------------------*
START-OF-SELECTION.

* Sim, os zumbis est√£o com fome! :)
* Note que voc√™ n√£o vai conseguir debuggar...
  comer_cerebros 4.
  comer_cerebros 8.
  comer_cerebros 2.
  comer_cerebros 5.
  comer_cerebros 20.

* Vamos ver se somou mesmo.
  WRITE v_cerebros_consumidos.
Beleza, funciona‚Ä¶ Mas depois desse exemplo de zueira, voc√™ deve estar se perguntando:
t√°, pra que √© que eu posso usar isso?
Lembra da minha hist√≥ria? Da macro ‚Äúvalidade_execution‚Äù? Ela rodava uma valida√ß√£o para saber se a exit estava ativa ou n√£o numa transa√ß√£o de configura√ß√£o do cliente (n√£o tem SMOD/CMOD para a SAVE_DOCMT_PREPARE da VA‚Ä¶), e adivinha: os ABAPs espertinhos n√£o podiam debuggar, porque voc√™ n√£o pode debuggar macros!
Logo, se a gente colocar um AUTHORITY-CHECK dentro de uma MACRO‚Ä¶
REPORT  zombie_macro.

*--------------------------------------------------------------------*
* MACROS
*--------------------------------------------------------------------*
DEFINE valida_autorizacao.

  authority-check object 'Z_CENTRO'
    id 'WERKS' field &1.

END-OF-DEFINITION.

DATA: wa_marc TYPE marc.

*--------------------------------------------------------------------*
* START-OF-SELECTION
*--------------------------------------------------------------------*
START-OF-SELECTION.

* Select qualquer, s√≥ para testar
  SELECT *
    FROM marc
    INTO wa_marc
    UP TO 1 ROWS.
  ENDSELECT.

  IF sy-subrc = 0.

*   Authority Check inquebr√°vel!
    valida_autorizacao wa_marc-werks.

  ENDIF.
J√° que n√£o d√° pra debugar, voc√™ acaba com a gra√ßa dos ABAPers que curtem pular autoriza√ß√µes. üòà
Agora falando s√©rio
mesmo:
eu usava macros para fazer algumas convers√µes ou mesmo contas simplezinhas. Acho que ajuda e deixa o c√≥digo mais limpo. Ao mesmo tempo, se for para fazer algum l√≥gica mais complexa ou que tenha base na regra de neg√≥cio, crie um FORM ou um M√©todo. √â mais f√°cil de debugar, analisar problemas ou mesmo alterar.
E por hoje chega!
break mauricio.cruz
Abra√ßos!



Coment√°rios:
Vinicius Silva (17/07/2014 13:28): Ressuscitando esse zumbi‚Ä¶ Outra vantagem da macro mas que deve ser usada com uma BOA quantidade de cuidado √© que ele n√£o exige declara√ß√£o do tipo das estruturas que forem usadas como par√¢metros‚Ä¶ Suponhamos duas estruturas que possuem o campo ‚ÄúDT_FIM‚Äù, voc√™ quer atualizar o campo das duas estruturas, at√© a√≠ o perform resolve‚Ä¶ mas e se cada uma possui uma estrutura diferente? Embora voc√™ consiga trabalhar com a estrutura, para acessar o campo o perform exigir√° a declara√ß√£o do tipo da estrutura, perdendo a din√¢mica da coisa. DEFINE ajusta_data.

&1-DT_FIM = &1-DT_INICIO + 30.

END-OF-DEFINITION. ajusta_data wa1.

ajusta_data wa2. Pronto, problema resolvido. Por motivos √≥bvios, todas as estruturas que forem passadas na macro devem ter os campos usados na mesma.
Rafael Paes (11/03/2013 10:50): Ol√°. Sempre estou por aqui e hoje resolvi curti! √ìtimo trabalho! Grande Abra√ßo!
Gisele Oliveira (04/09/2012 11:38): Gente, desde que conheci este site minha vida de ABAPer nunca mais foi a mesma. üòâ O conte√∫do √© sempre muito √∫til e did√°tico. Fora que √© uma divers√£o ler os textos. Sempre deixo escapar no m√≠nimo um sorrisinho quando vejo fotos como a do macaco acima ou a do Nhonho na outra p√°gina. rs Posso dizer que j√° perdi a conta de quantas coisas aprendi aqui. Hoje descobri como usar essa tal de macro. üòÄ Muito bom mesmo! Valeu!
Rafael Tavares (21/02/2011 05:30): As macros t√™m outra caracter√≠stica bastante interessante que permite que se monte os nomes das vari√°veis dinamicamente. Se eu tiver no meu c√≥digo vari√°veis com os nomes: DATA: wa_zombie1 TYPE type_zombie, wa_zombie2 TYPE type_zombie. Posso criar uma macro para limpar qualquer campo da tabela: DEFINE limpa_campo. CLEAR wa_&1-&2. END-OF_DEFINITION. As chamadas dessa macro deveriam passar sempre os valores para se completar o nome do campo. Por exemplo: limpa_campo: zombie1 cabeca, zombie2 tronco. A primeira chamada da macro vai limpar o campo 'wa_zombie1-cabeca' e a segunda chamada vai limpar o campo 'wa_zombie2-tronco'. Isso pode evitar que sejam necess√°rios alguns FIELD_SYMBOLS em casos espec√≠ficos.
  Mauricio Cruz (21/02/2011 05:37): Curti o clima zumbi do seu coment√°rio hahaha. Valeu Rafael! üòÄ
  Mauricio Cruz (21/02/2011 05:37): Curti o clima zumbi do seu coment√°rio hahaha. Valeu Rafael! üòÄ